#! /bin/bash
### BEGIN INIT INFO
# Provides:          docker-autostart
# Required-Start:    $remote_fs $syslog docker
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Auto-start docker container(s)
# Description:       Auto-start docker container(s).
#                    This scripts reads /etc/default/docker-autostart
#                    and start defined containers.
### END INIT INFO

# Author: tyru <tyru.exe@gmail.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="docker-autostart"
NAME=docker-autostart
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


match() {
	echo "$1" | egrep -q "$2"
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ -z "$autostart" ]; then
		echo 'error: $autostart is not defined in /etc/default/docker-autostart' >&2
		return 2
	fi

	pat1='^([a-zA-Z0-9_/]+):([a-zA-Z_][a-zA-Z0-9_]*)$'
	pat2='^[a-zA-Z_][a-zA-Z0-9_]*$'
	for c in $autostart; do
		if match "$c" "$pat1"; then
			actname=`echo "$c" | sed -re 's@'"$pat1"'@\1@'`
			alias=`echo "$c" | sed -re 's@'"$pat1"'@\2@'`
		elif match "$c" "$pat2"; then
			actname=$c
			alias=$c
		else
			echo "warning: invalid container name: $c" >&2
			continue
		fi

		# $docker_opts and $<alias>_docker_opts
		# may be defined in /etc/default/docker-autostart.
		# $docker_opts is a common docker option between containers.
		# $<alias>_docker_opts is a dedicated docker option for the container.
		alias_docker_opts=`eval "echo \\${${alias}_docker_opts}"`
		all_docker_opts="$docker_opts $alias_docker_opts"

		escaped_actname=`echo "$actname" | sed -re 's@/@\\\\/@g'`
		image_id=$(docker ps | awk "\$2 ~ /$escaped_actname/ { print \$1 }")
		if [ -z "$image_id" ]; then
			# 'docker rm $alias' to suppress the following error message:
			#   Error: Conflict, The name <name> is already assigned to <hash>.
			#   You have to delete (or rename) that container to be able to
			#   assign <name> to a container again.
			docker rm $alias 2>/dev/null
			docker run -d --name $alias $all_docker_opts $actname
		else
			echo "warning: container $actname is already running." >&2
		fi

	done

	return 0
}

case "$1" in
  start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
  stop|status|restart|reload|force-reload)
		echo "Error: argument '$1' not supported" >&2
		exit 3
		;;
  *)
		#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
		echo "Usage: $SCRIPTNAME start" >&2
		exit 3
		;;
esac

:
